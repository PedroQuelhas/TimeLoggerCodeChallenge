/*
 * Timelogger API
 *
 * CRUD management of timelogger
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using ServerApi.CodeGen.Attributes;
using ServerApi.CodeGen.Models;

namespace ServerApi.CodeGen.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public abstract class DefaultApiController : ControllerBase
    { 
        /// <summary>
        /// Create a customer
        /// </summary>
        /// <param name="customerDTO">Customer payload</param>
        /// <response code="201">The newly created customer</response>
        /// <response code="500">Unexpected error</response>
        [HttpPost]
        [Route("/api/v1/customer")]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 201, type: typeof(CustomerDTO))]
        [ProducesResponseType(statusCode: 500, type: typeof(ErrorDTO))]
        public abstract Task<IActionResult> AddCustomer([FromBody]CustomerDTO customerDTO);

        /// <summary>
        /// Create a project
        /// </summary>
        /// <param name="projectDTO">Project payload</param>
        /// <response code="201">The newly created project</response>
        /// <response code="500">Unexpected error</response>
        [HttpPost]
        [Route("/api/v1/projects")]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 201, type: typeof(ProjectDTO))]
        [ProducesResponseType(statusCode: 500, type: typeof(ErrorDTO))]
        public abstract Task<IActionResult> AddProject([FromBody]ProjectDTO projectDTO);

        /// <summary>
        /// Create a Timeslot
        /// </summary>
        /// <param name="id">The unique identifier</param>
        /// <param name="timeslotDTO">Timeslot payload</param>
        /// <response code="201">The newly created Timeslot</response>
        /// <response code="500">Unexpected error</response>
        [HttpPost]
        [Route("/api/v1/projects/{id}/timeslots")]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 201, type: typeof(TimeslotDTO))]
        [ProducesResponseType(statusCode: 500, type: typeof(ErrorDTO))]
        public abstract Task<IActionResult> AddProjectTimeslot([FromRoute (Name = "id")][Required]Guid id, [FromBody]TimeslotDTO timeslotDTO);

        /// <summary>
        /// Delete a customer
        /// </summary>
        /// <param name="id">The unique identifier</param>
        /// <response code="200">Success deleting a customer</response>
        /// <response code="404">No customer found for the provided &#x60;Id&#x60;</response>
        /// <response code="500">Unexpected error</response>
        [HttpDelete]
        [Route("/api/v1/customer/{id}")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 404, type: typeof(ErrorDTO))]
        [ProducesResponseType(statusCode: 500, type: typeof(ErrorDTO))]
        public abstract Task<IActionResult> DeleteCustomer([FromRoute (Name = "id")][Required]Guid id);

        /// <summary>
        /// Delete a project
        /// </summary>
        /// <param name="id">The unique identifier</param>
        /// <response code="200">Success deleting a project</response>
        /// <response code="404">No project found for the provided &#x60;Id&#x60;</response>
        /// <response code="500">Unexpected error</response>
        [HttpDelete]
        [Route("/api/v1/projects/{id}")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 404, type: typeof(ErrorDTO))]
        [ProducesResponseType(statusCode: 500, type: typeof(ErrorDTO))]
        public abstract Task<IActionResult> DeleteProject([FromRoute (Name = "id")][Required]Guid id);

        /// <summary>
        /// Fetch a customer
        /// </summary>
        /// <param name="id">The unique identifier</param>
        /// <response code="200">A customer</response>
        /// <response code="404">No customer found for the provided &#x60;Id&#x60;</response>
        /// <response code="500">Unexpected error</response>
        [HttpGet]
        [Route("/api/v1/customer/{id}")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(CustomerDTO))]
        [ProducesResponseType(statusCode: 404, type: typeof(ErrorDTO))]
        [ProducesResponseType(statusCode: 500, type: typeof(ErrorDTO))]
        public abstract Task<IActionResult> GetCustomer([FromRoute (Name = "id")][Required]Guid id);

        /// <summary>
        /// Fetch a list of customers
        /// </summary>
        /// <param name="offset">The number of items to skip before starting to collect the result set</param>
        /// <param name="limit">The numbers of items to return</param>
        /// <param name="filterKey">name of the field to filter by</param>
        /// <param name="filterValue"></param>
        /// <param name="sortKey">value of the field to sort by</param>
        /// <param name="sortOrder">sort order</param>
        /// <response code="200">A list of customers</response>
        /// <response code="500">Unexpected error</response>
        [HttpGet]
        [Route("/api/v1/customer")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(GetCustomers200Response))]
        [ProducesResponseType(statusCode: 500, type: typeof(ErrorDTO))]
        public abstract Task<IActionResult> GetCustomers([FromQuery (Name = "offset")]int? offset, [FromQuery (Name = "limit")]int? limit, [FromQuery (Name = "filter key")]List<string> filterKey, [FromQuery (Name = "filter value")]List<string> filterValue, [FromQuery (Name = "sort-key")]string sortKey, [FromQuery (Name = "sort-order")]string sortOrder);

        /// <summary>
        /// Fetch a project
        /// </summary>
        /// <param name="id">The unique identifier</param>
        /// <response code="200">A project</response>
        /// <response code="404">No project found for the provided &#x60;Id&#x60;</response>
        /// <response code="500">Unexpected error</response>
        [HttpGet]
        [Route("/api/v1/projects/{id}")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(ProjectDTO))]
        [ProducesResponseType(statusCode: 404, type: typeof(ErrorDTO))]
        [ProducesResponseType(statusCode: 500, type: typeof(ErrorDTO))]
        public abstract Task<IActionResult> GetProject([FromRoute (Name = "id")][Required]Guid id);

        /// <summary>
        /// Fetch a list of timeslots
        /// </summary>
        /// <param name="id">The unique identifier</param>
        /// <param name="offset">The number of timeslots to skip before starting to collect the result set</param>
        /// <param name="limit">The numbers of timeslots to return</param>
        /// <param name="filterKey">name of the field to filter by</param>
        /// <param name="filterValue">value of the field to filter with</param>
        /// <param name="sortKey">value of the field to sort by</param>
        /// <param name="sortOrder">sort order</param>
        /// <response code="200">A list of timeslots</response>
        /// <response code="500">Unexpected error</response>
        [HttpGet]
        [Route("/api/v1/projects/{id}/timeslots")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(GetProjectTimeslots200Response))]
        [ProducesResponseType(statusCode: 500, type: typeof(ErrorDTO))]
        public abstract Task<IActionResult> GetProjectTimeslots([FromRoute (Name = "id")][Required]Guid id, [FromQuery (Name = "offset")]int? offset, [FromQuery (Name = "limit")]int? limit, [FromQuery (Name = "filter key")]List<string> filterKey, [FromQuery (Name = "filter value")]List<string> filterValue, [FromQuery (Name = "sort-key")]string sortKey, [FromQuery (Name = "sort-order")]string sortOrder);

        /// <summary>
        /// Fetch a list of projects
        /// </summary>
        /// <param name="offset">The number of items to skip before starting to collect the result set</param>
        /// <param name="limit">The numbers of items to return</param>
        /// <param name="filterKey">name of the field to filter by</param>
        /// <param name="filterValue">value of the field to filter with</param>
        /// <param name="sortKey">value of the field to sort by</param>
        /// <param name="sortOrder">sort order</param>
        /// <response code="200">A list of projects</response>
        /// <response code="500">Unexpected error</response>
        [HttpGet]
        [Route("/api/v1/projects")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(GetProjects200Response))]
        [ProducesResponseType(statusCode: 500, type: typeof(ErrorDTO))]
        public abstract Task<IActionResult> GetProjects([FromQuery (Name = "offset")]int? offset, [FromQuery (Name = "limit")]int? limit, [FromQuery (Name = "filter key")]List<string> filterKey, [FromQuery (Name = "filter value")]List<string> filterValue, [FromQuery (Name = "sort-key")]string sortKey, [FromQuery (Name = "sort-order")]string sortOrder);

        /// <summary>
        /// Fetch a list of projects
        /// </summary>
        /// <param name="offset">The number of items to skip before starting to collect the result set</param>
        /// <param name="limit">The numbers of items to return</param>
        /// <param name="filterKey">name of the field to filter by</param>
        /// <param name="filterValue">value of the field to filter with</param>
        /// <param name="sortKey">value of the field to sort by</param>
        /// <param name="sortOrder">sort order</param>
        /// <response code="200">A list of project overview</response>
        /// <response code="500">Unexpected error</response>
        [HttpGet]
        [Route("/api/v1/projects/overview")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(GetProjectsOverview200Response))]
        [ProducesResponseType(statusCode: 500, type: typeof(ErrorDTO))]
        public abstract Task<IActionResult> GetProjectsOverview([FromQuery (Name = "offset")]int? offset, [FromQuery (Name = "limit")]int? limit, [FromQuery (Name = "filter key")]List<string> filterKey, [FromQuery (Name = "filter value")]List<string> filterValue, [FromQuery (Name = "sort-key")]string sortKey, [FromQuery (Name = "sort-order")]string sortOrder);

        /// <summary>
        /// Search list of projects
        /// </summary>
        /// <param name="offset">The number of items to skip before starting to collect the result set</param>
        /// <param name="limit">The numbers of items to return</param>
        /// <param name="searchKey">name of the field to search by</param>
        /// <param name="searchValue">value of the field to search with</param>
        /// <param name="filterKey">name of the field to filter by</param>
        /// <param name="filterValue">value of the field to filter with</param>
        /// <param name="sortKey">value of the field to sort by</param>
        /// <param name="sortOrder">sort order</param>
        /// <response code="200">A list of projects</response>
        /// <response code="500">Unexpected error</response>
        [HttpGet]
        [Route("/api/v1/projects/search")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<ProjectDTO>))]
        [ProducesResponseType(statusCode: 500, type: typeof(ErrorDTO))]
        public abstract Task<IActionResult> SearchProjects([FromQuery (Name = "offset")][Required()]int offset, [FromQuery (Name = "limit")][Required()]int limit, [FromQuery (Name = "search-key")][Required()]List<string> searchKey, [FromQuery (Name = "search-value")][Required()]List<string> searchValue, [FromQuery (Name = "filter key")]List<string> filterKey, [FromQuery (Name = "filter value")]List<string> filterValue, [FromQuery (Name = "sort-key")]string sortKey, [FromQuery (Name = "sort-order")]string sortOrder);

        /// <summary>
        /// Patch a customer
        /// </summary>
        /// <remarks>Body schema should follow format RFC 6902 (application/json-patch+json)</remarks>
        /// <param name="id">The unique identifier</param>
        /// <param name="body"></param>
        /// <response code="200">Success patching a customer</response>
        /// <response code="404">No customer found for the provided &#x60;Id&#x60;</response>
        /// <response code="409">Conflict detected during update</response>
        /// <response code="500">Unexpected error</response>
        [HttpPatch]
        [Route("/api/v1/customer/{id}")]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 404, type: typeof(ErrorDTO))]
        [ProducesResponseType(statusCode: 500, type: typeof(ErrorDTO))]
        public abstract Task<IActionResult> UpdateCustomer([FromRoute (Name = "id")][Required]Guid id, [FromBody]Object body);

        /// <summary>
        /// Patch a project
        /// </summary>
        /// <remarks>Body schema should follow format RFC 6902 (application/json-patch+json)</remarks>
        /// <param name="id">The unique identifier</param>
        /// <param name="body"></param>
        /// <response code="200">Success patching a project</response>
        /// <response code="404">No project found for the provided &#x60;Id&#x60;</response>
        /// <response code="409">Conflict detected during update</response>
        /// <response code="500">Unexpected error</response>
        [HttpPatch]
        [Route("/api/v1/projects/{id}")]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 404, type: typeof(ErrorDTO))]
        [ProducesResponseType(statusCode: 500, type: typeof(ErrorDTO))]
        public abstract Task<IActionResult> UpdateProject([FromRoute (Name = "id")][Required]Guid id, [FromBody]Object body);
    }
}
